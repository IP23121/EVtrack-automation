service: evtrack-automation-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.13
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 900  # 15 minutes - needed for browser automation
  memorySize: 1024  # Increased memory for Selenium
  
  environment:
    # EVTrack Core Configuration
    EVTRACK_EMAIL: ${env:EVTRACK_EMAIL}
    EVTRACK_PASSWORD: ${env:EVTRACK_PASSWORD}
    API_KEYS: ${env:API_KEYS}
    HEADLESS_MODE: ${env:HEADLESS_MODE, 'true'}
    STAGE: ${self:provider.stage}
    
    # Google Apps Script Integration
    GOOGLE_APPS_SCRIPT_BASE_URL: ${env:GOOGLE_APPS_SCRIPT_BASE_URL}
    GOOGLE_APPS_SCRIPT_TIMEOUT: ${env:GOOGLE_APPS_SCRIPT_TIMEOUT, '30'}
    
    # Google Workspace API Configuration
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET}
    GOOGLE_SERVICE_ACCOUNT_KEY: ${env:GOOGLE_SERVICE_ACCOUNT_KEY}
    GOOGLE_SHEETS_SCOPE: ${env:GOOGLE_SHEETS_SCOPE, 'https://www.googleapis.com/auth/spreadsheets'}
    GOOGLE_DRIVE_SCOPE: ${env:GOOGLE_DRIVE_SCOPE, 'https://www.googleapis.com/auth/drive'}
    
    # AWS Cognito Configuration
    COGNITO_REGION: ${env:COGNITO_REGION, 'us-east-1'}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    COGNITO_CLIENT_SECRET: ${env:COGNITO_CLIENT_SECRET}
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
        # Cognito permissions
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: '*'
        # Secrets Manager for Google Service Account Keys
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
          Resource: '*'
        # S3 permissions for file uploads/downloads (Google Drive integration)
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: '*'

functions:
  api:
    handler: lambda_handler.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          # Cognito authorizer for protected routes
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - http:
          path: /
          method: ANY
          cors: true
    layers:
      # Chrome/Chromium layer for headless browser
      - arn:aws:lambda:us-east-1:764866452798:layer:chrome-aws-lambda:32

resources:
  Resources:
    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: evtrack-api-${self:provider.stage}
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true

    # Cognito User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: evtrack-api-client-${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: true
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    # API Gateway Cognito Authorizer
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: CognitoAuthorizer
        RestApiId:
          Ref: RestApiApigEvent
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

  Outputs:
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-id
    
    CognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-client-id

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: true
    zip: true
    slim: true
    strip: false
    noDeps: false
    fileName: requirements.txt
    
package:
  patterns:
    - '!node_modules/**'
    - '!.git/**'
    - '!.pytest_cache/**'
    - '!__pycache__/**'
    - '!*.pyc'
    - '!.env'
    - '!README.md'
    - '!.vscode/**'
    - '!tests/**'
